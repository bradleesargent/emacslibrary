(defvar brad-org-lisp-code nil)
(defvar brad-page nil)
(defvar brad-location nil)
(defvar brad-compile-results nil)
(defvar brad-defvar-variable nil)
(defvar brad-bin-program nil)
(defvar brad-org-heading nil)
(defvar brad-org-process nil)
(require 'org)
(defvar brad-org-read-has-link nil)
(defvar brad-line-number nil)
(defvar brad-org-procedure nil)
(defvar brad-org-procedure-name nil)
(defvar brad-org-wordpress-procedure nil)
(defvar brad-org-wordpress-procedure-link nil)
(defvar brad-org-wordpress-procedure-link-name nil)
(defvar brad-org-website-procedure nil)
    ;;; package --- Summary brad.el brad librarry
    ;;; Commentary this package holds all of the customized commands that I create for use in my daily work.
    ;;; Code:
    (defvar brad-region-start nil)
    (defvar brad-default nil)
    (defvar brad-month nil)
    (defvar brad-year nil)
    (defvar brad-day nil)
    (defvar brad-date nil)
    (defvar brad-points nil)
    (defvar brad-window nil)
    (defvar brad-current-defun)
    (defvar brad-org-recover-process-continue nil)
    (defvar brad-org-recover-point nil)
    (defvar brad-org-file nil)
    (defvar brad-org-narrow-widen-last-choice nil)
    (defvar brad-org-website-file nil)
    (defvar brad-org-website-original nil)
    (defvar brad-org-website-wordpress nil)
    (defvar brad-response nil)
    (defvar brad-old-response nil)
    (defvar brad-next-response nil)
    (defvar brad-response-2 nil)
    (defvar brad-point-occur nil)
    (defvar brad-org-website-image-number 70)
    (defvar brad-number nil)
    (defvar brad-org-website-file "/home/bradlee/build/beisansystems/beisansystems.com/procedures/vanos_single_procedure.htm")
    (defvar brad-org-website nil)
    (defvar brad-org-website-link "https://www.beisansystems.com/procedures/")
    (defvar brad-org-wordpress-link "https://beisansystems.com/wordpress/index.php/procedures/")
    (defvar brad-org-menu-go nil)
    (defvar brad-org-menu-command nil)
    (defvar brad-stuff nil)
    (defvar brad-stuff-no-image nil)
    (defvar brad-menu-option nil)
    (defvar brad-result nil)
    (defvar brad-scan-paper nil)
    (defvar brad-scan-paper-point nil)
    (defvar brad-defun-name nil)
    (defvar brad-copy nil)
    (defvar brad-copy-list nil)
    (defvar brad-point nil)
    (defvar brad-location nil)
    (defvar brad-fix-process-continue nil)
    (defvar brad-file-name nil)
    (defvar brad-begin nil)
    (defvar brad-org-link nil)
    (defvar scan-start nil)
    (defvar scan-end nil)
    (defvar brad-todo-option nil)
    (defvar brad-org-todo-call nil)
    (defvar brad-todo-old-option nil)
    (defvar brad-org-todo-close nil)
    (defvar brad-org-file-name nil)
    (defvar brad-html-file-name nil)
    (defvar brad-buffer)
    (defvar html-name nil)
    (defvar brad-html-title nil)
    (defvar buffer-before-help nil)
    (defvar scan-file nil)
    (defvar brad-date nil)
    (defvar the-scan-file nil)
    (defvar brad-org-agenda-keep-going nil)`

    (defun brad-veronica ()
    (interactive)
    (find-file "/var/www/html/veronica.php" t)
    (browse-url "http://localhost/veronica.php")
    )

    (defun brad-veronica-json-csv ()
    (interactive)
    (find-file "/var/www/html/veronica.csv" t)
    )


    (defun brad-veronica-json-php ()
    (interactive)
    (find-file "/var/www/html/veronica.csv" t)
    (browse-url "http://localhost/veronicajson.php")
    )

    (defun brad-veronica-json ()
    (interactive)
    (find-file "/var/www/html/veronica.json" t)
    (browse-url "http://localhost/veronicajson.php")
    )

    (defun brad-buffers ()
    (interactive)
    (list-buffers)
    (other-window 1)
    (delete-other-windows)
    )

    (defun brad-kill-chrome ()
    (interactive)
    (shell-command-to-string "killall chrome")
    )

    (defun brad-home ()
    (interactive)
    (dired "/var/www/html")
    )

    (defun brad-links ()
    (interactive)
    (find-file
    "/var/www/html/links.html" t) )

    (defun brad-compile (&optional arg1)
      (interactive)
;;      (read-string (concat "brad-compile " arg1))
      (cond
       ((string-equal arg1 "bradbuffer")
        (find-file "~/brad/brad.el" t)
        (if
            (string-equal
             (read-string "Compile (cr=yes)?")
             ""
             )
            (brad-compile "compile")
          )
        )
       ((string-equal arg1 "error")
        (other-window 1)
        )
       ((string-equal arg1 "go")
        (switch-to-buffer "beisansystems.org")
        )
       ((string-equal arg1 "compile")
         (byte-compile-file(buffer-file-name))
        (brad-compile "ask")
        )
       ((string-equal arg1 "ask")
        (setq brad-response (read-string "Was compile success (y)es,(n)o (cr=yes)?"))
        (cond
         ((string-equal brad-response "")
          (delete-other-windows)
          (brad-compile "save")
          )
         ((string-equal brad-response "y")
          (delete-other-windows)
          (brad-compile "save")
          )
         ((string-equal brad-response "n")
          (brad-compile "error")
          )
         (t
          (read-string (concat "Invalid entry " brad-response "..."))
          (brad-compile "ask")
          ;; end of the t condition
          )
         ;; end of cond
         )
        ;; end of string equals ask
        )
       ((string-equal arg1 "save")
        (load-library (concat (buffer-file-name) "c"))
        (shell-command-to-string (concat "etags" (buffer-file-name)))
        (if (get-buffer "TAGS")
            (kill-buffer "TAGS")
          )
        (visit-tags-table "~/TAGS" t)
        )
       (t
        (delete-other-windows)
        (save-buffer)
        (if
            (string-equal
             (buffer-name)
             "brad.el")
            (brad-compile "compile")
          (brad-compile "bradbuffer")
          ;; end of if
          )
        ;; end of t
        )
       ;; end of cond
       )
      )
;; end of defun



    (defun brad-barrier ()
    (interactive)
    (shell nil)
    (insert "barrier &")
    (comint-send-input)
    )

    (defun brad-code ()
    (interactive)
    (shell nil)
    (insert "cd /var/www/html")
    (comint-send-input)
    (insert "code .")
    (comint-send-input)
    )

(defun brad-insert-prayer ()
  "Insert a prayer heading."
  (interactive)
  (goto-char (point-max))
  (insert "\n* PRAY ")
  (insert (format-time-string "<%Y-%m-%d %a %H:%M>"))
  (insert "\n")
  (org-clock-in)
  (org-timer-start nil)
  (goto-char (point-max))
  (insert "\n")
  (evil-insert 1 nil nil)
  (message "Press SPACE e x or control-x control-z to end...")
  (recursive-edit)
  (org-clock-out nil)
  (org-timer-stop)

  )

    (defun brad-scan (&optional arg1)
      (interactive)
      ;;  (read-string (concat "brad-scan " arg1 "?"))
      (cond
       ((string-equal arg1 "pray")
        (find-file "~/org/papersprayer.org" t)
        (brad-insert-prayer)
       )
       ((string-equal arg1 "scan")
        (brad-scan "scans")
        )
       ((string-equal arg1 "scann")
        (brad-nimbus-date)
        (beginning-of-line 1)
        (setq scan-start (point))
        (end-of-line 1)
        (brad-scan "start")
        )

       ((string-equal arg1 "scanp")
        (brad-scan "pray")
        (find-file "~/org/files.org")
        (goto-char (point-max))
        )
       ((string-equal arg1 "scans")
        (brad-scan "pray")
        (if
            (string-equal (buffer-name) "org/papers.org")
            (message "We are in the right buffer")
          (find-file "~/org/papers.org")
          )
        (goto-char (point-max))
        (insert "\n* ")
        (message "Enter the name of the file to scan and press control-x control-z")
        (evil-insert 1 nil nil)
        (recursive-edit)
        (setq brad-scan-paper-point (point))
        (org-todo "")
        (beginning-of-line 1)
        (setq scan-start (+ (point) 2))
        (setq brad-scan-paper (buffer-substring-no-properties scan-start brad-scan-paper-point))
        (find-file "~/papers.txt")
        (goto-char (point-max))
        (insert (concat brad-scan-paper "\n"))
        (save-buffer)
        (switch-to-buffer "papers.org")
        (end-of-line 1)
        (insert " ")
        (org-time-stamp nil)
        (brad-scan "start")
        )
       ((string-equal arg1 "start")
        (setq scan-end (point))
        (setq brad-date "")
        (setq scan-file (buffer-substring-no-properties scan-start scan-end))
        (kill-new scan-file)
        (org-todo "SCANNING")
        (org-clock-in nil)
        (brad-scan "scani")
        )
       ((string-equal arg1 "scani")
        (goto-char (point-max))
        (insert
         (concat "\nNotes\n\n"
                 "- [ ] Scanned paper\n"
                 "- [ ] Click on next, then google and wait\n"
                 "- [ ] Enter Name and press return\n"
                 "- [ ] Click on Send to save to Drive\n"
                 "- [ ] Threw paper away or filed it away\n"
                 "- [ ] Wait\n"
                 "- [ ] Saved to the drive\n"
                 "- [ ] Pressed control-x control-z to pray for the stuff I am scanning and to continue scanning everything\n"
                 "- [ ] Scan the next paper\n"
                 )
         )
        (search-backward "Scanned paper")
        (save-buffer)
        (org-timer-start)
        (save-buffer)
        (message "type any notes and see if you need to scan the paper or not...press control-x control-z to exit")
        (recursive-edit)
        (brad-scan "scanf")
        )
       ((string-equal arg1 "scanf")
        (org-todo "SAVED")
        (org-timer-stop)
        (search-backward "SAVED")
        (org-cycle nil)
        (save-buffer)
        )
       (t
        (setq brad-response
              (read-string
               "Do you want to scan a paper (i)nsert, (f)inish, (n)imbus,(p)aper file, (s)tandard,cr=yes)?"))
        (brad-scan (concat "scan" brad-response))
        )
       )
      )


    (defun brad-scan-item (the-scan-file brad-date)
    (find-file "/var/www/html/scanfile.html" t)
    (html-autoview-mode nil)
    (goto-char (point-max))
    (insert "<input type='text' value='")
    (insert the-scan-file)
    (insert "'/><br/>\n")
    (insert "<input type='checkbox'>Put item in the trash<br/>")
    (save-buffer)
    (browse-url "http://localhost:scanfile.html")
    )

    (defun brad-org-todo ()
    (interactive)
    (setq brad-todo-option (read-key-sequence "clock (i)n,i(m)age checklist,(r)ead,pro(d)uct,(p)ray,(f)inances,(c)all,(o)ut,(q)uit"))
    (brad-org-todoer brad-todo-option)
    )
    (defun brad-org-todoer (&optional brad-todo-option)
    (interactive)
    (cond
    ((string-equal brad-todo-option "q")
        (message "quit")
        )
    ((string-equal brad-todo-option "f")
        (insert "\n** ACTIVE Finances Information ")
        (org-time-stamp nil)
        (setq brad-org-todo-close "DONE")
        (insert "\nNotes\n\n")
        (insert "\n- [ ] Fidelity")
        (insert "\n- [ ] Step 1 Fidelity")
        (insert "\n- [ ] Step 2 BBT")
        (insert "\n- [ ] Step 3 BJS Credit Card")
        (insert "\n- [ ] Step 4 Walmart Credit Card")
        (insert "\n- [ ] Step 5 Citi Card")
        (insert "\n- [ ] Step 6 Rooms to go")
        (insert "\n- [ ] Step 7 Duke Energy")
        (insert "\n- [ ] Step 8 Mortgage")
        (insert "\n- [ ] Step 9 Duke Energy")
        (insert "\n- [ ] Step 10 Bank of America")
        (insert "\n- [ ] Step 11 Allstate")
        (insert "\n- [ ] Step 12 Water bill")
        (insert "\n- [ ] Step 13 Fidelity Rewards")
        (insert "\n- [ ] Step 14 Metro PCS")
        (insert "\n- [ ] Step 15 Veronica")
        (insert "\n- [ ] Step 16 Donations")
        (insert "\n- [ ] Step 17 Discover")
        (insert "\n- [ ] Step 18 Submit")
        (save-excursion (insert "\n\n** Prayer\n"))
        (org-clock-in nil)
        (org-timer-start nil)
        (org-narrow-to-subtree)
        (message "Work on your finances")
        (recursive-edit)
        )
   ((string-equal brad-todo-option "c")
        (setq brad-org-todo-close "CALLED")
        (org-todo "CALL")
        )
    ((string-equal brad-todo-option "d")
        (setq brad-org-todo-close "DONE")
        (org-clock-in nil)
        (org-timer-start)
        (org-narrow-to-subtree)
        )
    ((string-equal brad-todo-option "m")
     (setq brad-point (point))
        (insert "\n- [ ] Insert image here")
        (insert "\n- [ ] Insert image on website")
        (insert "\n- [ ] Insert large image link here")
        (insert "\n- [ ] Insert large image link on website")
        (insert "\n- [ ] Insert Description here")
        (insert "\n- [ ] Insert Description on website")
        (insert "\n- [ ] Insert html for add to cart button here")
        (insert "\n- [ ] Insert html for add to cart button on website")
        (insert "\n- [ ] click to enlarge")
        (insert "\n- [ ] update")
        (insert "\n- [ ] preview in other window")
        (insert "\n- [ ] check image\n")
        (insert "\n- [ ] check Add to cart button\n")
        (insert "*** Description\n")
        (insert "\n*** Image Link for small image\n")
        (insert "\n** Image Link for large image\n")
        (insert "\n** Image code block for Add to cart\n")
        (insert "\n#+BEGIN_SRC html\n")
        (insert "\n#+END_SRC\n")
        (goto-char brad-point)
        )
    ((string-equal brad-todo-option "p")
        (brad-org-pray)
        (setq brad-org-todo-close "PRAYED")
        (browse-url "http://www.divineoffice.org")
        )
    ((string-equal brad-todo-option "i")
 (org-clock-in nil)
        (org-todo "ACTIVE")
        (setq brad-org-todo-close "DONE")
        (org-timer-start)
        (org-narrow-to-subtree)
        (goto-char (point-max))
        (org-timer-item nil)
        )
    ((string-equal brad-todo-option "close")
        (beginning-of-line 0)
        (org-cycle nil)
        )
    ((string-equal brad-todo-option "o")
        (if (org-clock-is-active)
        (org-clock-out nil)
        )
        (org-timer-stop)
        (widen)
        (org-todo brad-org-todo-close)
        (org-timer-start nil)
        (search-backward "SCHEDULED:")
        (right-char 18)
        (org-shiftright nil)
        )
    (t
        (message "Enter i, d, r, p, o or q only")
        )
    )
    )



    (defun brad-org-agenda (&optional arg1)
    (interactive)
    (cond
    (arg1
        (cond
        ((string-equal arg1 "loop")
        (setq brad-org-agenda-keep-going t)
        (brad-org-agenda "run")
        (while brad-org-agenda-keep-going
        (brad-org-agenda "menu")
        )
        (switch-to-buffer "organize.org")
        )
        ((string-equal arg1 "menu")
        (if (string-equal (read-string "Run again (cr=yes,mode)?") "")
        (brad-org-agenda "run")
        (setq brad-org-agenda-keep-going nil)
        )
        )
        ((string-equal arg1 "mode")
        (describe-mode)
        (delete-other-windows)
        )
        ((string-equal arg1 "run")
        (org-agenda-list)
        (delete-other-windows)
        (recursive-edit)
        (if (not (string-equal (buffer-name) "*Org Agenda*"))
        (save-buffer)
        (setq brad-org-agenda-keep-going nil)
        )
        )
        )
        )
    (t
        (brad-org-agenda "loop")
        )
    )
    )

    (defun brad-org-agenda-simple (&optional arg1)
    (interactive)
    (org-agenda-list)
    (delete-other-windows)
    )


    (defun brad-help ()
    (interactive)
    (setq brad-buffer (buffer-name))
    (find-file "~/help.org")
    (delete-other-windows)
    (message "press control z to exit")
    (recursive-edit)
    (switch-to-buffer brad-buffer)
    )


    (defun brad-html-file ()
    (interactive)
    (setq html-name (read-string "Name of the html file?"))
    (find-file (concat html-name ".html") t)
    (insert "<!DOCTYPE html>\n")
    (insert "<html lang='eng'>\n")
    (insert "<head>\n")
    (insert "<title>\n")
    (setq brad-html-title (read-string "Title?"))
    (insert brad-html-title)
    (insert "\n")
    (insert "</head>\n")
    (insert "<body>\n")
    (insert "<h1 style='text-align:center'>")
    (insert brad-html-title)
    (insert "</h1>")
    (save-excursion
        (insert "</body>\n</html>\n"))
    )

    (defun brad-emacs ()
    (interactive)
    (setq brad-buffer (buffer-name))
    (find-file "~/.emacs" t)
    (delete-other-windows)
    (message "press control-z to return to the file")
    (recursive-edit)
    (switch-to-buffer brad-buffer)
    )

    (defun brad-library ()
    (interactive)
    (save-buffer)
    (find-file "~/brad/brad.el" t)
    (load-library "~/brad/brad.elc")
    )




    (defun brad-edit-library (&optional arg1)
      (interactive)
      (cond
       ((string-equal arg1 "error")
        (other-window 1)
        )
       (t
        (setq brad-buffer (buffer-name))
        (delete-other-windows)
        (if (string-equal (buffer-name) "bradlee/brad.el")
            (message "We are in the right buffer")
          (find-file "~/brad/brad.el")
          )
        (message "Press SPACE e x or control-x control-z to compile...")
        (recursive-edit)
        (brad-compile)
        (if
            (not
             (string-equal brad-buffer "bradlee/brad.el")
             )
            (switch-to-buffer brad-buffer)
          )
        )
       )
      )

    (defun brad-coffee ()
    (interactive)
    (find-file "/home/bradlee/org/panera.org" t)
    (goto-char (point-max))
    (insert "\n* TODO Order Coffee\nSCHEDULED: ")
    (insert "\n- [ ] Order coffee 1")
    (insert "\n- [ ] Order coffee 2")
    (insert "\n- [ ] Order coffee 3")
    )


    (defun brad-www ()
    (interactive)
    (dired "/var/www/html")
    )

    (defun brad-funimation ()
    (interactive)
    (browse-url "http://www.funimation.com")
    )

    (defun brad-refresh ()
    (interactive)
    (save-buffer)
    (setq brad-buffer (buffer-file-name))
    (kill-buffer (buffer-name))
    (find-file brad-buffer))


    (defun brad-org-pray ()
    (interactive)
    (org-todo "PRAYING")
    (org-cycle nil)
    (org-narrow-to-subtree)
    (delete-other-windows)
    (goto-char (point-max))
    (org-timer-start)
    (insert "\n*** PRAYING ")
    (org-time-stamp nil)
    (insert "\n")
    (org-clock-in nil)
    )



    (defun brad-org-checkmark ()
      "Insert a checkmark on it's own line."
    (interactive)
    (insert "\n- [ ] ")
    (evil-insert 1 nil nil)
    )

    (defun brad-org-checkmark-inline ()
      "Insert a checkmark in the current line."
    (interactive)
    (beginning-of-line 1)
    (insert "- [ ] ")
    )


    (defun brad-todo (thethingtodo)
    (interactive)
    (org-todo thethingtodo)
    (org-cycle nil)
    (org-narrow-to-subtree)
    (delete-other-windows)
    (goto-char (point-max))
    (org-timer-start)
    (setq brad-date (shell-command-to-string "echo -n $(date +%Y-%m-%d)"))
    (insert "\n:LOG")
    (insert brad-date)
    (insert ":\n:DATE: ")
    (insert brad-date)
    (insert "\n")
    (org-timer-item)
    (org-clock-in nil)
    )

    (defun brad-call ()
    (interactive)
    (brad-todo "CALLING")
    )

    (defun brad-pray-stop ()
    (interactive)
    (insert "\n:END:\n")
    (org-todo "PRAYED")
    (if (org-clock-is-active)
        (org-clock-out nil)
        )
    (org-timer-stop)
    )


    (defun brad-financial ()
    (interactive)
    (find-file "/var/www/html/financial.html" t)
    )

    (defun brad-financial-script ()
    (interactive)
    (find-file "/var/www/html/financialhtml.js" t)
    )

    (defun brad-financial-json ()
    (interactive)
    (find-file "/var/www/html/financial.json" t)
    )


    (defun brad-financial-store ()
        (interactive)
        (find-file "/var/www/html/financialstore.php" t)
    )

    (defun brad-financial-store-text-area ()
        (interactive)
        (find-file "/var/www/html/financialstoretextarea.php" t)
    )

    (defun brad-financial-prayer-confirm ()
        (interactive)
        (find-file "/var/www/html/prayerconfirm.php" t)
    )

    (defun brad-org-new ()
    (interactive)
    (setq brad-org-file-name (read-string "Enter the name of the org file only?"))
    (setq brad-org-file-name (concat brad-org-file-name ".org"))
    (find-file (concat "~/org/" brad-org-file-name) t)
    (brad-org-new-header)
    )
    (defun brad-org-new-header ()
    (interactive)
    (setq brad-point (point))
    (goto-char (point-min))
    (insert "* Headers\n")
    (insert "#+STARTUP: indent\n")
    (insert "#+TODO: TODO(a) ACTIVE(b!) PENDING(c)  | DONE(d@)\n")
    (insert "#+STARTUP: hidestars\n")
    (org-agenda-file-to-front nil)
    (save-buffer)
    (brad-refresh)
    (goto-char brad-point)
    )
    (defun brad-org-agenda-add ()
    "Add this file to the org agenda."
    (interactive)
    (org-agenda-file-to-front nil)
    )
    (defun brad-org-new-extended ()
    (interactive)
    (setq brad-org-file-name (read-string "Enter the name of the org file only?"))
    (setq brad-org-file-name (concat brad-org-file-name ".org"))
    (find-file (concat "~/" brad-org-file-name) t)
    (insert "* Headers\n")
    (insert "#+STARTUP: indent\n")
    (insert "#+TODO: TODO(a) ACTIVE(b!) PENDING(c)  | DONE(d@)\n")
    (insert "#+TODO: BACKLOG(e) PLAN(f) READY(g) ACTIVE(h) REVIEW (i) WAIT(j) HOLD(k) | COMPLETED(l) CANC(m@)\n")
    (insert "#+STARTUP: hidestars\n")
    (org-agenda-file-to-front nil)
    (save-buffer)
    (brad-refresh)
    )

    (defun brad-html-new ()
    (interactive)
    (setq brad-html-file-name (read-string "Enter the name of the org file only?"))
    (setq brad-html-file-name (concat brad-html-file-name ".html"))
    (find-file (concat "/var/www/html" brad-html-file-name) t)
    (insert "<!DOCTYPE HTML>\n")
    (insert "<html lang='eng'>\n")
    (insert "<head>\n")
    (insert "<title>\n")
    (setq brad-html-title (read-string "The title?"))
    (insert brad-html-title)
    (insert "</title>\n")
    (insert "<body>\n")
    (insert "<h1 style='text-align:center'>")
    (insert brad-html-title)
    (insert "</h1>\n")
    (save-excursion
        (insert "\n</body>\n</html>"))
    (save-buffer)
    )


    (defun brad-insert-tag-filename ()
    (interactive)
    (insert (concat " file='" (buffer-name) "'"))
    )

    (defun brad-org-dired ()
    (interactive)
    (dired "~/org")
    )

    (defun brad-oscar ()
    (interactive)
    (browse-url "https://www.hioscar.com/auth/login")
    )

    (defun brad-test (test1 test2)
    (interactive "sTest1:\nsTest2:")
    (message "Test1: %s Test2: %s" test1 test2)
    )

    (defun brad-fix ()
    (interactive)
    (brad-org-recover-process)
    (setq brad-org-recover-process-continue t)
    (while brad-org-recover-process-continue
        (if (string-equal (read-string "Go again?") "")
        (brad-org-recover-process "fixit")
        (setq brad-org-recover-process-continue nil)
        )
        )
    )



    (defun brad-org-recover-process (&optional arg1)
    (interactive)
    (cond
    ((string-equal arg1 "part2")
        (switch-to-buffer "*Occur*")
        )
    ((string-equal arg1 "standard")
        (search-forward ":")
        (setq brad-begin (point))
        (search-forward " ")
        (setq
        brad-file-name
        (concat
        "~/org/"
        (buffer-substring-no-properties brad-begin (- (point) 1)))
        )
        )
    ((string-equal arg1 "fixit")
        (brad-org-recover-process "part2")
        (brad-org-recover-process "chooseline")
        (brad-org-recover-process "standard")
        (brad-org-recover-process "fixer")
        )
    ((string-equal arg1 "fixer")
        (if
        (string-equal
        (read-string
        (concat "read the "
            brad-file-name
            " and recover it?")) "")
        (brad-org-recover-process "fix")
        (brad-org-recover-process "part2")
        )
        )
    ((string-equal arg1 "setline")
        (goto-char brad-org-recover-point)
        (beginning-of-line 2)
        )
    ((string-equal arg1 "chooseline")
        (if brad-org-recover-point
        (brad-org-recover-process "setline")
        )
        (message "Place cursor on the line of the next file...and press contorl-x control-z")
        (recursive-edit)
        (setq brad-org-recover-point (point))
        )
    ((string-equal arg1 "buffer")
        (other-window 1)
        (delete-other-windows)
        (read-only-mode)
        )
    ((string-equal arg1 "occurs")
        (switch-to-buffer ".occurs")
        )
    ((string-equal arg1 "fix")
        ;; here I want to fix the file
        (find-file brad-file-name t)
        (recover-this-file)
        (brad-org-recover-process "part2")
        )
    (t
        ;; first I save the buffer name
        (setq brad-buffer (buffer-name))
        ;; go to the messages buffer
        (switch-to-buffer "*Messages*")
        ;; and I delete any other windows
        (delete-other-windows)
        ;; and I search for auto save data
        (occur "auto save data" nil)
        (brad-org-recover-process "buffer")
        (brad-org-recover-process "chooseline")
        ;; now set the read only mode off
        ;; now see what happens here
        ;;    (goto-char (point-min))
        (brad-org-recover-process "standard")
        (brad-org-recover-process "fixer")
        )
    )
    )

    (defun brad-php-errors ()
    (interactive)
    (find-file "/var/www/html/php_errors.log" t)
    )

    (defun brad-conversation ()
    (interactive)
    (insert "\n:CONVERSATION ")
    (setq brad-date (shell-command-to-string "echo -n $(date +%Y-%m-%d)"))
    (insert brad-date)
    (insert ":\n:INTRO: ")
    (set-fill-prefix)
    (save-excursion (insert "\n\t:RESPONSE: \n\t:DIALOG: \n\t:END:\n"))
    )

    (defun brad-org-make-link (&optional arg1)
        (interactive)
        (read-string (concat "arg1:" arg1))
        (cond
         ((string-equal arg1 "makelink")
          (setq brad-org-link (read-string "Enter link for this book?"))
          (beginning-of-line 1)
          (open-line 1)
          (insert (concat "[[" brad-org-link "][" brad-org-link "]]\n"))
          (org-todo "HAS_LINK")
        )
        ((string-equal arg1 "readlink")
         (setq brad-org-link (match-string 1))
         (read-string (concat "Is this okay..." brad-org-link "?"))
         )
        ((string-equal arg1 "getlink")
         (browse-url "http://read.amazon.com")
         (brad-org-make-link "makelink")
         (brad-org-make-link "process")
         )
        ((string-equal arg1 "process")
         (brad-org-make-link "readlink")
         (if
             (string-equal
              (read-string
               (concat
                "Browse to "
                brad-org-link
                "(cr=yes)?")) "")
             (browse-url brad-org-link)
           )
         )
        (t
         (if
             (setq brad-org-read-has-link (re-search-backward "\\(http.*$\\)"))
             (brad-org-make-link "process")
           (brad-org-make-link "getlink")
           )
         )
        )
        )

    (defun brad-messages ()
      "Look at the messages buffer and return..."
    (interactive)
    (setq brad-buffer (buffer-name))
    (switch-to-buffer "*Messages*")
    (message "Press control-x control-c when ready...")
    (recursive-edit)
    (switch-to-buffer (buffer-name))
    )

    (defun brad-defun-new ()
      "Create a new brad function..."
      (interactive)
      (if (string-equal (read-string "Go to the end (cr=yes)?") "")
          (goto-char (point-max))
        )
      (insert "\n(defun ")
      (setq brad-point (point))
      (insert "brad-")
      (setq brad-defun-name (read-string "Name of the defun"))
      (insert brad-defun-name)
      (setq brad-current-defun (buffer-substring-no-properties brad-point (point)))
      (insert " () \n")
      (insert (concat "\"" (read-string "Description?") ".\"\n"))
      (insert "(interactive)\n")
      (setq brad-point (point))
      (insert "\n)\n")
      (goto-char brad-point)
      (evil-insert 1 nil nil)
      )


(defun brad-defun-finish ()
  "Finish the defun."
  (interactive)
  (search-backward "(defun brad")
  (indent-pp-sexp nil)
  )





(defun brad-paste ()
  (interactive)
  (setq brad-copy (car kill-ring))
  (setq brad-copy-list (split-string brad-copy "\n"))
  (cl-loop for buf in brad-copy-list
           do (insert (concat "\n\t - [ ] " buf "\n"))
           )
  )


(defun brad-org-doc ()
  (interactive)
  (setq brad-result (shell-command-to-string "/home/bradlee/bin/orgmodedoc"))
  )

(defun brad-finances-table ()
  (interactive)
  (insert "|-------------+-----------------+------------|\n")
  (insert "| Date        | Item            | Amount     |\n")
  (insert "|-------------+-----------------+------------|\n")
  (insert "|             | First Amount    |            |\n")
  (insert "|             | Smallest Amount |            |\n")
  (insert "|             | Latest Amount   |            |\n")
  (insert "|-------------+-----------------+------------|\n")
  )

(defun brad-org-mode-hook ()
  (auto-fill-mode t)
  (org-bullets-mode 1)
  (cond
   ((string-equal (buffer-name) "*Org Note*")
    (org-timer-start)
    (message "Lord grant me the grace of patience, courage, and desire to pray more...")
    (auto-fill-mode t)
    (evil-insert 1 nil nil)
    )
   )
  )




(defun brad-org-menu (&optional arg1)
  (interactive)
  (cond
   ((string-equal arg1 "")
    (setq brad-org-menu-go nil)
    )
   ((string-equal arg1 "e")
    (message "Edit the file and press control-x control-z when done...")
    (recursive-edit)
    (save-buffer)
    (switch-to-buffer brad-buffer)
    )
   (t
    (setq brad-buffer (buffer-name))
    (find-file "~/menu.txt" nil)
    (setq brad-menu-option (read-string "Option (e=edit)?"))
    (brad-org-menu brad-menu-option)
    )
   )
  )

(defun brad-org-menu-line ()
  (interactive)
  (beginning-of-line 1)
  (setq brad-begin (point))
  (search-forward " ")
  (setq brad-org-menu-command (buffer-substring-no-properties brad-begin (point)))
  (read-string (concat "Command:" brad-org-menu-command "?"))
  )


(defun brad-html ()
  (interactive)
  (dired "/var/www/html")
  )

(defun brad-org-roam ()
  (interactive)
  (goto-char (point-min))
  (insert ":PROPERTIES:\n")
  (setq brad-buffer (file-name-sans-extension (file-name-nondirectory (buffer-file-name))))
  (insert ":ID:       ")
  (insert brad-buffer)
  (insert "\n:END:\n")
  (insert ":#+title: ")
  (insert brad-buffer)
  (insert "\n")
  (org-agenda-file-to-front nil)
  (save-buffer)
  (read-string "Okay?")
  (switch-to-buffer "org-roam")
  (dired-next-line 1)
  )



(defun brad-org-website-section ()
  (interactive)
  (delete-other-windows)
  (message "Place cursor at the end of the section and press control-x control-z")
  (setq brad-point (point))
  (recursive-edit)
  (setq brad-stuff (buffer-substring-no-properties brad-point (point)))
  (save-excursion
    (insert "\n***** TODO Section\n"))
  (org-narrow-to-subtree)
  (org-clock-in nil)
  (kill-new brad-stuff)
  (message "work on things and press control-x control-z")
  (setq brad-buffer (current-buffer))
  (switch-to-buffer "*scratch")
  (erase-buffer)
  (insert brad-stuff)
  (read-string "Okay?")
  (switch-to-buffer brad-buffer)
  (recursive-edit)
  (widen)
  (if (org-clock-is-active)
      (org-clock-out nil)
    )
  (beginning-of-line 3)
  (save-buffer)
  (if (string-equal (read-string "Again (cr=yes)?") "")
      (brad-org-website-section))

  )

(defun brad-org-website-image (&optional arg1)
  (interactive)
  (cond
   ((string-equal arg1 "usenumber")
    (insert (format "image%03d.jpg"  brad-org-website-image-number))
    (setq brad-stuff (buffer-substring-no-properties brad-point (point)))
    (kill-new brad-stuff)
    )
   ((string-equal arg1 "setnumber")
    (setq brad-org-website-image-number (string-to-number brad-number))
    (brad-org-website-image "usenumber")
    )
   ((string-equal arg1 "nextnumber")
    (brad-org-website-image-next)
    (org-narrow-to-subtree)
    )
   ((string-equal arg1 "go")
    (org-todo "DONE")
    (message "Place cursor at next image place...and press control-x control-z")
    (recursive-edit)
    (brad-org-website-image)
    )
   (t
    (delete-other-windows)
    (insert "\n***** TODO Insert Image\n")
    (insert "Go to the line and add an image before it:\n")
    (insert "Name of images:\n")
    (setq brad-point (point))
    (if
        (string-equal
         (setq brad-number
               (read-string
                (concat "Image number:"
                        (number-to-string brad-org-website-image-number) "?"))) "")
        (brad-org-website-image "usenumber")
      (brad-org-website-image "setnumber")
      )
    (setq brad-org-website-image-number (+ brad-org-website-image-number 1))
    (org-narrow-to-subtree)
    (message "Press control-x control-v")
    (recursive-edit)
    (widen)
    (save-buffer)
    (if
        (string-equal
         (setq brad-response (read-string "Go again(cr=yes, n=next-number)?")) "")
        (brad-org-website-image "go")
      (if (string-equal brad-response "n")
          (brad-org-website-image "nextnumber")
        )
      )
    )
   )
  )

(defun brad-org-website-image-next ()
  (interactive)
  (insert "\n")
  (setq brad-point (point))
  (insert (format "image%03d.jpg" brad-org-website-image-number))
  (setq brad-stuff (buffer-substring-no-properties brad-point (point)))
  (kill-new brad-stuff)
  (setq brad-org-website-image-number (+ brad-org-website-image-number 1))
  )

(defun brad-org-website-link (&optional arg1)
  (interactive)
  (cond
   (t
    ;;  (setq brad-org-file (buffer-file-name))
    (beginning-of-line 1)
    (insert "***** TODO Create Link\n")
    (org-narrow-to-subtree)
    (setq brad-org-website-file "/home/bradlee/build/beisansystems/beisansystems.com/procedures/vanos_single_procedure.htm")
    (find-file-other-window brad-org-website-file t)
    (message "Place cursor on the line of the link.")
    (recursive-edit)
    (brad-org-website-link-comment)
    (beginning-of-line 1)
    (search-backward "--->")
    (search-forward "\"")
    (setq brad-point (point))
    (search-forward "\"")
    (setq brad-stuff (buffer-substring-no-properties brad-point (- (point) 1)))
    (kill-new brad-stuff)
    (other-window 1)
    (delete-other-windows)
    (goto-char (point-max))
    (insert (concat "\n" brad-stuff "\n\n"))
    (save-buffer)
    )
   )
  )

(defun brad-org-website-next-link-done ()
  (interactive)
  (search-backward "--->")
  (if (string-equal (read-string "Done(cr=yes)?") "")
      (insert "DONE ")
    )
  (save-buffer)
  )
(defun brad-org-website-next-link ()
  (interactive)
  (widen)
  (find-file-other-window brad-org-website-file t)
  (brad-org-website-next-link-done)
  (message "Search for the matching string for the link...")
  (brad-org-website-link-comment)
  (other-window 1)
  (message "Place cursor at position of link to be created...")
  (recursive-edit)
  (delete-other-windows)
  (brad-org-website-link)
  )

(defun brad-org-website-link-comment ()
  (interactive)
  (search-forward "<a")
  (goto-char (- (point) 2))
  (insert "\n<!--- Creating link in wordpress for the following link --->\n")
  (read-string "Okay?")
  (save-buffer)
  )

(defun brad-org-narrow-widen (&optional arg1)
  (interactive)
  (cond
   ((string-equal arg1 "w")
    (widen)
    (recenter-top-bottom nil)
    (recenter-top-bottom nil)
    (setq brad-org-narrow-widen-last-choice "n")
    )
   ((string-equal arg1 "n")
    (org-narrow-to-subtree)
    (setq brad-org-narrow-widen-last-choice "w")
    )
   ((string-equal arg1 "")
    (if brad-org-narrow-widen-last-choice
	(brad-org-narrow-widen brad-org-narrow-widen-last-choice)
      )
    )
   (t
    (brad-org-narrow-widen
     (setq
      brad-response
      (read-string
       (concat
	"(w)iden,(n)arrow"
	(if brad-org-narrow-widen-last-choice
	    (concat "," brad-org-narrow-widen-last-choice)
	  ""
	  )
	"?")
       )
      )
     )
    )
   )
  )

(defun brad-file-store ()
  (interactive)
  (setq brad-org-file (buffer-file-name))
  )

(defun brad-file-insert-find-file ()
  (interactive)
  (open-line 1)
  (insert (concat "(find-file \"" brad-org-file "\" t)"))
  )

(defun brad-file-insert-org-mode-link ()
"Insert an org mode link for this file here."
(interactive)
(setq brad-point (point))
(insert (concat "[[" brad-org-file "][" (read-string (concat "Description of " brad-org-file "?")) "]]\n"))
(goto-char brad-point)
)

(defun brad-file-insert-find-file-other-window ()
  (interactive)
  (open-line 1)
  (insert (concat "(find-file-other-window \"" brad-org-file "\" t)"))
  )

(defun brad-file-insert-find-files ()
  (interactive)
  (if (not brad-response) (setq brad-response "p"))
  (brad-file-insert-find-file)
  (insert "\n")
  (brad-file-insert-find-file-other-window)
  (insert "\n")
  )

(defun brad-beisan-view ()
  "View the beisan websites.."
  (interactive)
  (browse-url brad-org-website-link)
  (browse-url brad-org-wordpress-link)
  )
(defun brad-beisan-view-procedures ()
  "View the beisan websites.."
  (interactive)
  (browse-url brad-org-procedure)
  (browse-url brad-org-wordpress-procedure)
  )


(defun brad-beisan-process ()
  "Process the beisan systems file."
  (interactive)
  (brad-org-get-find-file "mainp"))


(defun brad-beisan-mark (&optional arg1)
  "Mark this as a link that is being handled"
  (interactive)
  (read-string (concat "brad-beisan-mark " arg1))
  (cond
   ((string-equal arg1 "checkr")
    (insert "<!--- removed --->")
    )
   ((string-equal arg1 "checkc")
    (insert "<!--- check --->")
    )
   ((string-equal arg1 "check")
    (insert "<!--- check --->")
    )
   ((string-equal arg1 "checkd")
    (insert "<!--- done --->")

    )
   (t
    (beginning-of-line 1)
    (sit-for 1)
    (if (string-equal (read-string "Okay?") "")
        (message "okay")
      )
    (setq
     brad-response
     (read-string "(c)heck,(d)one,(r)emoved?"))
    (beginning-of-line 1)
    (brad-beisan-mark (concat "check" brad-response))
    )
   (other-window 1)
   )
  )

(defun brad-defun-cond ()
  "Turn a normal defun into a cond defun.."
  (interactive)
  (read-string "Put cursor after opening parentheses")
  (recursive-edit)
  (insert "&optional arg1")
  (beginning-of-line 1)
  (setq brad-point (point))
  (search-forward "(interactive)\n")
  (open-line 1)
  (read-string "Move cursor to after interactive")
  (insert "(cond \n((string-equal arg1 \"\")\n)\n(t ")
  (recursive-edit)
  (read-string "Put at end of defun")
  (goto-char brad-point)
  (forward-sexp 1 (point))
  (open-line 1)
  (insert ")\n)\n")
  )


(defun brad-beisan-query ()
  "Do the brad beisan query stuff."
  (interactive)
  (brad-beisan-query-doer)
  (brad-beisan-query-doer "procedures")
  )

(defun brad-beisan-query-doer (&optional arg1)
  "Query which files to become a part of the beisan procedure."
  (interactive)
  (cond
   ((string-equal arg1 "procedures")
    (insert "#+BEGIN_SRC emacs-lisp\n")
    (insert
     (concat
      "(setq brad-org-procedure \""
      (read-string "Original procedure?")
      "\")\n"
      )
     )
    (insert
     (concat
      "(setq brad-org-wordpress-procedure \""
      (read-string "Wordpress procedure?")
      "\")\n")
     )
    (insert "#+END_SRC\n\n")
    )
   (t
    (org-narrow-to-subtree)
    (goto-char (point-min))
    (brad-beisan-view)
    (dired-other-window "/home/bradlee/build/beisansystems/beisansystems.com/procedures/*.htm")
    (goto-char (point-min))
    (message "Choose the appropriate file press return and press control-x control-z")
    (recursive-edit)
    (brad-file-store)
    (find-file "~/org/beisansystems.org" t)
    (goto-char (point-max))
    (org-insert-property-drawer)
    (org-set-property "BRAD-ORG-WEBSITE-FILE" brad-org-file)
    (insert "#+BEGIN_SRC emacs-lisp\n")
    (insert "(defun brad-org-current-open ()\n(interactive)\n")
    (brad-file-insert-find-files)
    (insert ")\n")
    (insert "#+END_SRC\n\n")
    (insert "#+BEGIN_SRC emacs-lisp\n")
    (insert "(defun brad-org-current ()\n(interactive)\n")
    (insert (concat "(setq brad-org-website-file \"" brad-org-file "\")\n"))
    (insert (concat "(setq brad-org-website-original \"" brad-org-file "\")\n"))
    (insert ")")
    (insert "\n#+END_SRC\n\n")
    (insert "\n#+BEGIN_SRC emacs-lisp")
    (insert "\n(brad-org-current-open)")
    (insert "\n#+END_SRC\n\n")
    (insert "\n#+BEGIN_SRC emacs-lisp\n")
    (insert "\n(brad-org-current)\n")
    (insert "\n#+END_SRC\n\n")
    (delete-other-windows)
    )
   )
  )

(defun brad-beisan-shell ()
  "Insert the stuff I need..."
  (interactive)
  (insert "#+BEGIN_SRC emacs-lisp\n")
  (insert "\n(brad-org-current)")
  (eval-last-sexp nil)
  (insert "#+END_SRC\n\n")
  (insert "#+BEGIN_SRC emacs-lisp\n")
(insert
   (concat
    "(setq brad-org-procedure \""
    (read-string "Original procedure?")
    "\")\n"
    )
   )
  (insert
   (concat
    "(setq brad-org-wordpress-procedure \""
    (read-string "Wordpress procedure?")
    "\")\n")
   )
  (insert "#+END_SRC\n\n")
  )


(defun brad-beisan-other-window-revert ()
  "Revert the other window."
  (interactive)
  (other-window 1)
  (revert-buffer t)

  )


(defun brad-org-get-find-file (&optional arg1)
  (interactive)
  (setq debug-on-error t)
  (read-string (concat "brad-org-get-find-file " arg1))
  (cond
   ;; This is option s
   ((string-equal arg1 "mains")
    (org-narrow-to-subtree)
    (goto-char (point-min))
    (search-forward "Insert find files")
    (beginning-of-line 2)
    (open-line 1)
    (insert "- [ ] Search links\n")
    (org-todo "SEARCH_LINKS")
    (widen)
    )
   ;; option b
   ((string-equal arg1 "mainb")
    (org-clock-in)
    (org-narrow-to-subtree)
    (open-line 1)
    (setq brad-point (+ (point) 1))
    (insert "\n- [ ] Insert find files\n- [ ] Search links\n\n")
    (beginning-of-line 0)
    (split-window-below nil)
    (other-window 1)
    )
   ((string-equal arg1 "docopy")
    (find-file "~/org/beisansystems.org" t)
    (goto-char (point-max))
    (brad-org-get-find-file "aftercopy")
    )
   ;; option q
   ((string-equal arg1 "mainq")
    (org-narrow-to-subtree)
    (dired-other-window "/home/bradlee/build/beisansystems/beisansystems.com/procedures/*.htm")
    (goto-char (point-min))
    (message "Choose the appropriate file press return and press control-x control-z")
    (recursive-edit)
    (brad-file-store)
    (find-file "~/org/beisansystems.org" t)
    (goto-char (point-max))
    (org-insert-property-drawer)
    (org-set-property "BRAD-ORG-WEBSITE-FILE" brad-org-file)
    (insert "#+BEGIN_SRC emacs-lisp\n")
    (insert "(defun brad-org-current-open ()\n(interactive)\n")
    (brad-file-insert-find-files)
    (insert ")\n")
    (insert "#+END_SRC\n\n")
    (insert "#+BEGIN_SRC emacs-lisp\n")
    (insert "(defun brad-org-current ()\n(interactive)\n")
    (insert (concat "(setq brad-org-website-file \"" brad-org-file "\")\n"))
    (insert (concat "(setq brad-org-website-original \"" brad-org-file "\")\n"))
    (insert ")\n")
    (insert "#+END_SRC\n\n")
    (insert "#+BEGIN_SRC emacs-lisp\n")
    (insert "(brad-org-current-open)")
    (eval-last-sexp nil)
    (insert "#+BEGIN_SRC emacs-lisp\n")
    (insert "\n(brad-org-current)")
    (eval-last-sexp nil)
    (insert "#+END_SRC\n\n")
    (delete-other-windows)
    )
   ;; <!--- <a Create link in wordpress for the following link --->
   ((string-equal arg1 "mainm")
    )
  ;; find the occurence
   ;; we need to find a way to set the brad-org-website-file 
   ((string-equal arg1 "reset")
    (other-window 1)
    (delete-other-windows)
    )
   ((string-equal arg1 "mains")
    (widen)
    (search-backward "brad-org-website-file")
    )
   ;; option n
   ((string-equal arg1 "mainn")
    (if
	(string-equal (buffer-name) "beisansystems.org")
	(brad-org-get-find-file "newaftercopy")
      (switch-to-buffer "beisansystems.org")
      )
    )
   ;; option after copy
   ((string-equal arg1 "newaftercopy")
    (beginning-of-line 1)
    (open-line 1)
    (insert "*** SEARCHING_LINK Link [/]\n")
    (brad-org-get-find-file "maint")
    (brad-org-get-find-file "maini")
    )
   ((string-equal arg1 "maini")
    (brad-beisan-subtree)
   )
   ;; option r
   ((string-equal arg1 "mainr")
    (setq brad-next-response "p")
    (find-file "~/org/beisansystems.org" t)
    (delete-other-windows)
    (save-buffer)
    (top-level)
    )
   ;; option e
   ((string-equal arg1 "maine")
    (setq brad-next-response "r")
    (find-file "~/org/beisansystemsmenu.org" t)
    (delete-other-windows)
    )
   ;; option o
   ((string-equal arg1 "mainf")
    (if (string-equal (buffer-name) "*Occur*")
	(brad-org-get-find-file "reset")
      )
    (widen)
    (org-todo "LINK_DONE")
    (setq brad-next-response "p")
    (if (org-clock-is-active) (org-clock-out nil))
    (org-timer-stop)
    (search-backward "SEARCHING_LINK")
    )
   ;; option getter
   ((string-equal arg1 "getter")
    (if
        (not
         (string-equal
          (read-string
           (concat
            "Website file"
            brad-org-website-file
            " (cr=correct)?"
            )
           )
          ""
          )
         )
        (message "wrong website file")
      (find-file-other-window brad-org-website-file t)
      (occur "<a" nil)
      (other-window 1)
      (goto-char (point-min))
      (delete-other-windows)
      (split-window-below nil)
      (switch-to-buffer "beisansystems.org")
      (org-narrow-to-subtree)
      (other-window 1)
      )
    )
   ;; option makesetq
   ((string-equal arg1 "makesetq")
    (open-line 1)
    (insert "\n(setq brad-org-website-file \"")
    (insert brad-org-website-file)
    (insert "\")")
    )
   ;; option insertsetq
   ((string-equal arg1 "insertsetq")
    (setq brad-org-website-file brad-org-website-original)
    (if (string-equal (read-string (concat "Insert brad-org-website-file here (cr=yes)?")) "")
        (brad-org-get-find-file "makesetq")
      )
    )
   ;; option getit
   ((string-equal arg1 "getit")
    (if
	brad-org-website-original
        (brad-org-get-find-file "insertsetq")
      (brad-org-get-find-file "error")
      )
    )
   ;; option error
   ((string-equal arg1 "error")
    (switch-to-buffer "beisansystems.org")
    (if (not brad-org-website-file)
        (if (not brad-org-website)
	    (message "Set the variable brad-org-website-file and brad-org-website...")
	  )
      (message "Set the variable brad-org-website...")
      )
    (if (not brad-org-website-original)
	(message "Set the variable brad-org-website-original")
      )
    )
   ;; option finder
   ((string-equal arg1 "finder")
    (if
	brad-org-website-file
	(brad-org-get-find-file "getter")
      (brad-org-get-find-file "getit")
      )
    )
   ;; option process
   ((string-equal arg1 "process")
    (setq brad-next-response "a")
    (beginning-of-line 1)
    (setq brad-point-occur (point))
    (end-of-line 1)
    (setq brad-stuff (buffer-substring-no-properties brad-point-occur (point)))
    (switch-to-buffer "beisansystems.org")
    (org-narrow-to-subtree)
    (goto-char (point-max))
    (open-line 1)
    (insert "\n*** SEARCHING_LINK Link\n")
    (insert brad-stuff)
    (org-clock-in nil)
    (delete-other-windows)
    (save-buffer)
    (if brad-org-website
	(browse-url brad-org-website)
      (brad-org-get-find-file "error")
      )
    )
   ;; option d for done
   ((string-equal arg1 "maind")
    (widen)
    (org-clock-out "DONE" nil)
    )
   ;; option maina
   ((string-equal arg1 "maina")
    (if 
	(string-equal
	 (setq brad-response-2 (read-string "Found link and clicked on it (cr=yes)?"))
	 "")
	(org-todo "LINK_DONE")
      (goto-char (point-max))
      (insert "\n- [ ] Edit Mode\n- [ ] Add link\n")
      (browse-url brad-org-website-file)
      )
    )
   ;; This is option p
   ((string-equal arg1 "mainp")
    (setq brad-next-response "c")
    (brad-org-current)
    (if (string-equal (buffer-name) "*Occur*")
	(brad-org-get-find-file "process")
      (brad-org-get-find-file "finder")
      )
    )
   ;; This is option l for link
   ((string-equal arg1 "mainw")
    (browse-url brad-org-website)
    )
   ;; convert the page to wordpress
   ((string-equal arg1 "mainh")
    (org-todo "CONVERT_LINK_TO_WORDPRESS")
    (org-narrow-to-subtree)
    (goto-char (point-max))
    (org-clock-in)
    (org-timer-start)
    (open-line 1)
    (setq brad-point (point))
    (insert "- [ ] Find link\n- [ ] Edit link\n- [ ] Create page\n- [ ] Edit page\n- [ ] Update page\n- [ ] Preview page\n")
    (goto-char (point))
    )
   ;; this is option c for copy
   ((string-equal arg1 "mainc")
    (setq brad-next-response "t")
    (if (string-equal (buffer-name) "beisansystems.org") 
	(other-window 1)
      )
    (if
	(not (string-equal (buffer-name) "*Occur*"))
        (message "Something is not right...")
      )
    )
   ((string-equal arg1 "maint")
    (setq brad-next-response "o")
    (other-window 1)
    (beginning-of-line 1)
    (setq brad-point-occur (point))
    (end-of-line 1)
    (setq brad-stuff (buffer-substring-no-properties brad-point-occur (point)))
    (other-window 1)
    (if
	(string-equal (buffer-name) "beisansystems.org")
	(brad-org-get-find-file "aftercopy")
      (message "Something is wrong...%s is not beisansystems.org" (buffer-name))
      )
    )
   ;; change the website file
   ((string-equal arg1 "maing")
    (other-window 1)
    (message "Edit this file and press control-x controlz")
    (recursive-edit)
    (other-window 1)
    )
   ;; option aftercopy
   ((string-equal arg1 "aftercopy")
    (beginning-of-line 1)
    (open-line 1)
    (brad-beisan-subtree)
    (insert brad-stuff)
    (beginning-of-line 1)
    (org-clock-in nil)
    (org-timer-start)
    )
   ((string-equal arg1 "getvalues")
    (widen)
    (search-backward "brad-org-website-orginal")
    (recursive-edit)
    )
   ;; option u update the comment
   ((string-equal arg1 "mainu")
    (message "Are we in the right place")
    (recursive-edit)
    (beginning-of-line 1)
    (set-mark-command nil)
    (end-of-line 1)
    (replace-string-in-region "<!--- check --->" "<!--- done --->")
    )
   ;; option mainv
   ((string-equal arg1 "mainv")
    (if brad-org-website-original
	(browse-url brad-org-website-original)
      (brad-org-get-find-file "main")
      )
    (if brad-org-website-wordpress
	(browse-url brad-org-website-wordpress)
      )
    )
   (arg1
    (message "Invalid option...")
    )
   (t
    (setq brad-window (split-window-right nil))
    (other-window 1)
    (find-file "/home/bradlee/org/beisansystemsmenu.org" t)
    (goto-char (point-min))
    (if brad-next-response
	(setq brad-old-response brad-next-response)
      (setq brad-old-response brad-response)
      )
    (setq
     brad-response
     (read-string
      (concat
       "Option (cr="
       brad-old-response
       ")"
       )
      )
     )
    (if (string-equal brad-response "") (setq brad-response brad-old-response))
    (other-window 1)
    (delete-window brad-window)
    (brad-org-get-find-file
     (concat "main" brad-response))
    )
   )
  )

(defun brad-defvar ()
  (interactive)
  (setq brad-defvar-variable (read-string "Name of the variable to add?"))
  (setq brad-point (point))
  (goto-char (point-min))
  (open-line 1)
  (insert (concat "(defvar " brad-defvar-variable " nil)"))
  (if (string-equal (read-string "Okay (cr=yes)?") "")
      (goto-char brad-point))
	     
  )

(defun brad-defvar-insert-setq ()
  "Insert a setq for the variable here."
  (interactive)
  (open-line 1)
  (insert
   (concat "(setq " brad-defvar-variable " ")
   )
  (if (string-equal (read-string "Enter closing parentheses (cr=yes)?") "")
      (save-excursion
        (read-string "Press SPACE e x after...")
        (recursive-edit)
        (insert " )")
        )
    )
  )

(defun brad-defvar-insert ()
  "Insert a setq for the variable here."
  (interactive)
  (open-line 1)
  (insert brad-defvar-variable)
  )


(defun brad-open ()
  (interactive)
  (setq brad-point (point))
  (push brad-point brad-points)
  (end-of-line 1)
  (setq brad-org-file (buffer-substring-no-properties brad-point (point)))
  (goto-char (+ (point-min) 2))
  (setq brad-point (point))
  (end-of-line 1)
  (setq brad-stuff (buffer-substring-no-properties brad-point (- (point) 1)))
  (setq brad-org-file (concat brad-stuff "/" brad-org-file))
  (shell-command-to-string (concat "/usr/bin/dolphin " brad-org-file))
  (setq brad-point (pop brad-points))
  (goto-char brad-point)
  )

(defun brad-snap-emacs ()
  (interactive)
  (shell nil)
  (goto-char (point-max))
  (insert "snap info emacs")
  (comint-send-input)
  )


(defun brad-read () 
  (interactive)
  (browse-url "http://read.amazon.com")
  )


(defun brad-org-link-mark () 
  (interactive)
  (insert "<!--- ")
  (insert (read-string "Comment?"))
  (insert " --->")
  )

(defun brad-org-clear-subtree ()
  (interactive)
  (org-mark-subtree) ;; mark the current subtree
  (forward-line)     ;; move point forward, so the headline isn't in the region
  (delete-region (region-beginning) (region-end)) ;; delete the rest
  )


(defun brad-dialog-sort () 
  (interactive)
  (find-file "~/bin/x" t)
  (goto-char (point-min))
  (search-forward "--menu")
  (beginning-of-line 2)
  (open-line 1)
  (insert "`# beginning of sort` \\")
  (read-string "Okay?")
  (setq brad-point (point))
  (search-forward "2> .option")
  (beginning-of-line 0)
  (open-line 1)
  (insert "`# end of sort` \\")
  (read-string "Okay?")
  (sort-lines nil brad-point (point))
  )
	
(defun org-clock-kill-emacs-query ()
  (interactive)
  (message "Okay")
  )
	
(defun brad-x ()
  (interactive)
  (find-file "~/bin/x" t)
  )

(defun brad-x-default ()
  (interactive)
  (find-file "~/.default" t)
  )

(defun brad-run-x ()
  (interactive)
  (shell-command-to-string "/usr/bin/konsole -e /home/bradlee/bin/x &")
  )


(defun brad-run-console ()
  (interactive)
  (print (start-process "konsole" "*konsole*" "/usr/bin/konsole"))
  )

(defun brad-run-read ()
  "Run read the book..."
  (interactive)
  (setq brad-org-process (start-process "konsole" "*konsole*" "/usr/bin/bash" "/home/bradlee/bin/readbook"))
  )


(defun brad-google ()
  (interactive)
  (setq brad-stuff (shell-command-to-string "/usr/bin/google-chrome"))
  )



(defun brad-nimbus-date ()
  (interactive)
  (yank)
  (beginning-of-line -1)
  (insert "* ")
  (end-of-line 1)
  (delete-char 1 t)
  (setq brad-point (point))
  (setq brad-region-start brad-point)
  (end-of-line 1)
  (setq brad-date (buffer-substring-no-properties brad-point (point)))
  (delete-region brad-region-start (point))
  (read-string (concat "Date:" brad-date "?"))
  (org-insert-time-stamp (org-read-date t t brad-date))
  
  )


(defun brad-regexp () 
  (interactive)
  (if
      (re-search-forward "<!--- \\([a-z]\\) --->" nil t)
      (match-string "result")
    )
  )


(defun brad-org-grep () 
  (interactive)
  (setq brad-stuff (shell-command-to-string (concat "grep '" (read-string "What to search for?")  "' $HOME/org/*.org")))
  (switch-to-buffer "*Org-Grep*")
  (other-window nil)
  (erase-buffer)
  (insert brad-stuff)
  )

(defun brad-doom (&optional arg1)
  (interactive)
  (setq edebug-trace t)
  (cond
   ;; option c to open the config.el file
   ((string-equal arg1 "main")
    (brad-doom "mainc")
    )
   ;; option c to open the config.el file
   ((string-equal arg1 "mainc")
    (brad-doom-config)
    )
   ;; i option to open the init.el file
   ((string-equal arg1 "maini")
    (find-file "~/.doom.d/init.el")
    )
   ;; compile the library
   ((string-equal arg1 "mainm")
    (brad-edit-library)
    )
   ;; p option to open the package el file
   ((string-equal arg1 "mainp")
    (find-file "~/.doom.d/packages.el")
    )
   (t
    (setq brad-response (read-string "(c)onfig, (i)nit, co(m)pile,(p)ackage (cr=config)?"))
    (brad-doom (concat "main" brad-response)
               )
    )
   )
  )

(defun brad-doom-config ()
  (interactive)
  (find-file "~/.doom.d/config.el")
  (delete-other-windows)
  )

;; we need to insert config

;; Try this to open procedure
(defun brad-org-current-open ()
  "Open the current beisansystems file and look for anchors."
  (interactive)
  (find-file "/home/bradlee/build/beisansystems/beisansystems.com/procedures/vanos_procedure.htm" t)
  (occur "<a")
  (delete-other-windows)
  (split-window-below nil)
  (other-window 1)
  (switch-to-buffer "*Occur*")
  )
;; now to be able to switch to another buffer and revert it
(defun brad-doom-update ()
  "Revert the other buffer after inserting the html comment."
  (interactive)
  (other-window 1)
  (setq brad-stuff (line-number-at-pos))
  (revert-buffer t)
  (vertical-motion brad-stuff)
  )


(defun brad-el-fix ()
  "Fix el file."
  (interactive)
  (find-file "~/brad/brad.el" t)
  (delete-other-windows)
  (find-file-other-window "~/bradbad.el" t)
)

(defun brad-org-kill ()
  "Take the current region and put it into the kill buffer."
  (interactive)
  (kill-new (buffer-substring-no-properties (mark) (point)))
  )

(defun brad-map ()
  "Add a new map to the keys."
  (interactive)
  (find-file "~/.doom.d/config.el" t)
  (delete-other-windows)
  (goto-char (point-min))
  (search-forward ";; end of map")
  (beginning-of-line 1)
  (open-line 2)
  (insert "\n(map! :leader\n")
  (insert ":desc \"")
  (insert (read-string "Description?"))
  (insert "\"\n")
  (insert "     \"e ")
  (insert (read-string "Short cut key?"))
  (insert "\" #'")
  (insert (read-string "Name of function?"))
  (insert ")\n")
  (doom/reload)
  )

(defun brad-org-clode-block ()
  "Insert a code block for og mode."
    (interactive)
    (insert "#+BEGIN_SRC\n")
    (insert "#+END_SRC\n\n")
  )
(defun brad-package(&optional arg1)
  "Add a package."
  (interactive)
  (cond
   ((string-equal arg1 "")
    )
   (t
    (find-file "~/.doom.d/packages.el" t)
    (goto-char (point-max))
    (insert "(package! ")
    (insert (read-string "Name of the package to add?"))
    (insert ")")
    (doom/reload)
    )
   )
  )
(defun brad-kill-shell ()
    "Kill the shell buffer."
  (interactive)
  (kill-buffer "*shell*")
  )
(defun brad-maps ()
  "List the mapped keys."
(interactive)
(find-file "~/.doom.d/config.el" t)
(occur "\"e")
)

(defun brad-org-file ()
  "Add a new thing to the files org file."
  (interactive)
  (find-file "~/org/files.org" t)
  (goto-char (point-max))
  (insert "\n* TODO ")
  (evil-insert 1 nil nil)
)

(defun brad-org-read (&optional arg1)
  "Get into the read mode."
  (interactive)
  (read-string (concat "brad-org-read:" arg1 "?"))
  (cond
   ((string-equal arg1 "location")
    (setq brad-location  (read-string "Location (cr=page)?"))
    (if (string-equal brad-location "")
        (brad-org-read "page")
      (insert " location ")
      (insert brad-location)
      (insert "\n")
      )
    )
   ((string-equal arg1 "page")
    (setq brad-page  (read-string "Page?"))
    (insert " page ")
    (insert brad-page)
    (insert "\n")
    )
   (t
    (save-buffer)
    (org-todo "NEEDS_LINK")
    (setq brad-org-todo-close "READ")
    (org-narrow-to-subtree)
    (goto-char (point-max))
    (brad-org-make-link)
    (setq brad-org-heading (org-get-heading t t))
    (find-file "~/.thebook" t)
    (erase-buffer)
    (insert brad-org-heading)
    (insert "\n")
    (save-buffer)
    (kill-buffer (buffer-name))
    (brad-debug)
    (insert "\n** READING ")
    (brad-org-read "location")
    (brad-run-read)
    (setq brad-point (point))
    (evil-insert 1 nil nil)
    (insert "\n\n")
    (org-clock-in nil)
    (org-schedule nil)
    (org-timer-start)
    )
   )
  )

(defun brad-org-clock-in ()
  "Clock in."
  (interactive)
  (org-clock-in nil)
  (org-todo "STRT")
  (setq brad-org-todo-close "DONE")
  (org-timer-start)
  (org-narrow-to-subtree)
  (goto-char (point-max))
  (org-timer-item nil)
  )

(defun brad-org-clock-out ()
 "Clock out of org mode."
 (interactive)
 (if (org-clock-is-active)
     (org-clock-out nil)
   )
 (org-timer-stop)
 (widen)
 (org-todo brad-org-todo-close)
 (org-timer-start nil)
 (search-backward "SCHEDULED:")
 (right-char 18)
 (org-shiftright nil)
)

(defun brad-beisan-revert ()
  "Revert the occurs buffer."
  (interactive)
  (if
      (not
       (string-equal (buffer-name) "*Occur*")
       )
      (other-window 1)
    )
  (revert-buffer t)
  )


(defun brad-beisan-mark-done ()
  "Mark the link as done."
  (interactive)
  (beginning-of-line 1)
  (if (re-search-forward "check" nil t)
      (replace-match "done")
    )
  )


(defun brad-beisan-done ()
  "The link is done."
  (interactive)
  (search-backward "Check link on line")
  (org-todo "DONE")
  (widen)
  (outline-hide-subtree)
  (evil-org-open-below 1)
  )


(defun brad-beisan-subtree ()
  "Edit the beisansystems link."
  (interactive)
  (beginning-of-line 1)
  (setq brad-point (point))
  (end-of-line 1)
  (setq brad-stuff (buffer-substring-no-properties brad-point (point)))
  (beginning-of-line 1)
  (re-search-forward "\\([0-9]+\\)" nil t)
  (setq brad-number (match-string-no-properties 1))
  (other-window 1)
  (insert (concat "\n\n*** TODO Check link on line " brad-number "\n"))
  (org-narrow-to-subtree)
  (message "Press control-x control-z or space e x to exit...")
  (recursive-edit)
  (insert "**** Nimbus Webpage\n")
  (insert
   "[[https://bradlee-sargent.nimbusweb.me/ws/c4a94lj1k0i0xiyd/folder/imoyEt1ze2rbvXgp/note/cqNPc7eCCLnSI3Ni][Nimbus Beisan Systems]]\n")
  (insert "**** Original Procedures Webpage\n\n\n")
  (insert "[[https://www.beisansystems.com/procedures/][Procedures]]\n\n\n")
  (insert "- [ ] Open original web page\n\n\n")
  (insert "**** Wordpress Procedures Webpage\n\n\n")
  (insert "[[https://beisansystems.com/wordpress/index.php/procedures/][Wordpress Procedures]]\n\n\n")
  (insert "- [ ] Log into wordpress\n")
  (insert "- [ ] Open wordpress web page\n\n\n")
  (insert "**** Find Original Procedure\n\n\n")
  (insert "- [ ] Paste original procedure here\n\n\n\n")
  (insert brad-org-procedure)
  (insert "\n")
  (insert "**** Find Wordpress Procedure\n\n\n")
  (insert "- [ ] Paste wordpress procedure here\n\n\n\n")
  (insert brad-org-wordpress-procedure)
  (insert "\n")
  (insert "**** Find Original Link\n\n\n")
  (insert "- [ ] Paste original link here\n\n\n\n")
  (insert "**** Link context\n\n\n")
  (insert "- [ ] Paste context of link here so we can search the wordpress page for it\n\n")
  (insert "**** Find Wordpress link or create wordpress content by copying original content\n\n\n")
  (insert "- [ ] Find and paste wordpress link here which is related to the original link above but the wordpress version\n\n\n\n")
  (insert "**** Replace link to original content with the link to wordpress content\n\n\n")
  (insert "- [ ] Copy the link below\n")
  (insert "- [ ] paste it into the wordpress procedure, replacing original href with the wordpress version\n")
  (insert "- [ ] update the page\n")
  (insert "- [ ] view the page\n")
  (insert "- [ ] double check the link\n")
  (insert "**** Replace link to original content with the link to wordpress content\n\n\n")
  (insert brad-stuff)
  (goto-char brad-point)
  (org-timer-start)
  (org-clock-in nil)
  )


(defun brad-org-undo ()
  "Undo the results and widen.."
  (interactive)
  (undo nil)
  (widen)
  (delete-other-windows)
  )

(defun brad-org-mode-done ()
  "Finish the task using my done thingie."
  (interactive)
  (if (org-clock-is-active)
      (org-clock-out nil)
    )
  (org-timer-stop)
  (widen)
  (org-todo brad-org-todo-close)
  (org-timer-start nil)
  (search-backward "SCHEDULED:")
  (right-char 18)
  (org-shiftright nil)
  )

(defun brad-bin-make ()
  "Make a bin file."
  (interactive)
  (find-file
   (setq
    brad-bin-program
    (concat "~/bin/"
            (read-string "Name of file?")
            )
    )
   t)
  (insert "!#/usr/bin/bash\n")
  (chmod (buffer-file-name) 484)
  )

(defun brad-debug ()
"Debug a procedure."
(message "Brad debug press SPACE e x or control-x control-z...")
(recursive-edit)
)

(defun brad-financial-grep ()
  "Grep the financial directory."
  (interactive)
  ;; (start-process "Grep" "*Financial Grep*" "/usr/bin/grep" (concat (read-string "What to search for?") " /var/www/html/*")) bi
  (start-process "Grep" "*Financial Grep*" "/usr/bin/grep" "test /var/www/html/*")
  )

(defun brad-beisan-help ()
  "Help file for beisan...."
  (interactive)
  (setq brad-buffer (buffer-name))
  (find-file "~/org/beisansystems-help.org" t)
  (delete-other-windows)
  (recursive-edit)
  (save-buffer)
  (switch-to-buffer brad-buffer)
  )

(defun brad-org-babel-shell ()
  "Make an org babel shell in an org file."
  (interactive)
  (insert "#+begin_src shell\n")
  (save-excursion
    (insert "\n\n#+end_src")
    )
  )

(defun brad-beisan-isolate-link ()
  "Isolate the link.."
  (interactive)
  (insert "\n<!--- check -->")
  )

(defun brad-beisan-occurs-choose ()
  "Choose the line."
  (interactive)
  (occur-mode-goto-occurrence 13)
  )

 (defun brad-beisan-occurs-copy-all ()
  "Copy all the occurs to the beisansystems.org."
  (interactive)
  (goto-char (point-min))
  (beginning-of-line 2)
  (setq brad-stuff (buffer-substring-no-properties (point) (point-max)))
  (other-window 1)
  (insert (concat "***** DONE\nuse alt j or alt shift up arrow to move stuff up\n\n ***** TODO \n" brad-stuff))
  )

(defun brad-beisan-wordpress ()
  "Show the master wordpress page."
  (interactive)
  (browse-url "https://beisansystems.com/wordpress/wp-admin")
  )

(defun brad-beisan-pray ()
  "Pray about what to do next with the website."
  (interactive)
  (find-file "/home/bradlee/org/beisansystemsprayer.org" t)
  (brad-insert-prayer)
  )
